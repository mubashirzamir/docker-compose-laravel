#!/bin/bash

# Forge - Docker Compose Laravel Development Environment Manager
# Handles: up, stop, down, rebuild

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMMANDS_DIR="$SCRIPT_DIR/scripts"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[FORGE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[FORGE]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[FORGE]${NC} $1"
}

print_error() {
    echo -e "${RED}[FORGE]${NC} $1"
}

# Function to show help
show_help() {
    echo "Forge - Docker Compose Laravel Development Environment Manager"
    echo ""
    echo "Usage:"
    echo "  ./forge <command> [options]"
    echo ""
    echo "Commands:"
    echo "  up       - Start containers with helpful status messages and URLs"
    echo "  stop     - Stop containers (preserves them for faster restart)"
    echo "  down     - Stop and remove containers"
    echo "  rebuild  - Rebuild images and start containers (use after Dockerfile changes)"
    echo "  help     - Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./forge up"
    echo "  ./forge stop"
    echo "  ./forge down"
    echo "  ./forge rebuild"
}

# Function to check if command script exists
check_command() {
    local command_script="$COMMANDS_DIR/forge-$1"
    if [[ ! -f "$command_script" ]]; then
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
    fi
}

# Function to execute command
execute_command() {
    local command="$1"
    local command_script="$COMMANDS_DIR/forge-$command"
    
    print_status "Executing: forge $command"
    
    if [[ -f "$command_script" ]]; then
        # Make sure the script is executable
        chmod +x "$command_script"
        # Execute the command script
        "$command_script"
    else
        print_error "Command script not found: $command_script"
        exit 1
    fi
}

# Main script logic
main() {
    # Check if we're in the right directory
    if [[ ! -f "compose-development.yml" ]]; then
        print_error "compose-development.yml not found. Please run this script from the project root."
        exit 1
    fi
    
    # Check if commands directory exists
    if [[ ! -d "$COMMANDS_DIR" ]]; then
        print_error "Commands directory not found: $COMMANDS_DIR"
        print_error "Please ensure the scripts/commands directory exists with the required command scripts."
        exit 1
    fi
    
    # Handle command
    case "${1:-help}" in
        "up"|"start")
            check_command "up"
            execute_command "up"
            ;;
        "stop")
            check_command "stop"
            execute_command "stop"
            ;;
        "down")
            check_command "down"
            execute_command "down"
            ;;
        "rebuild")
            check_command "rebuild"
            execute_command "rebuild"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
